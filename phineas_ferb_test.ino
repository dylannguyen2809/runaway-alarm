// Credit:
// Midi to Arduino Converter
//     - Andy Tran (extramaster), 2015
// https://www.extramaster.net/tools/midiToArduino/
//
// Process:
// Midi -> Midi tracks -> Note mappings -> Frequency
//
// CC0

// Set this to be the pin that your buzzer resides in. (Note that you can only have one buzzer actively using the PWM signal at a time).
int tonePin = 40;

struct Note {
    int frequency;
    int duration;
};

Note notes[] = {
    {207, 80}, {0, 83}, {207, 80}, {0, 83}, {349, 80}, {0, 83}, {349, 80}, {0, 83},
    {349, 80}, {0, 83}, {349, 80}, {0, 250}, {311, 80}, {0, 250}, {261, 80}, {0, 83},
    {311, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 250},
    {261, 80}, {0, 250}, {261, 80}, {0, 83}, {277, 80}, {0, 83}, {277, 80}, {0, 83},
    {277, 80}, {0, 83}, {277, 80}, {0, 250}, {261, 80}, {0, 250}, {233, 80}, {0, 83},
    {261, 80}, {87, 162}, {130, 80}, {0, 83}, {349, 80}, {0, 250}, {261, 80}, {0, 83},
    {207, 80}, {0, 83}, {207, 80}, {0, 83}, {349, 80}, {0, 83}, {349, 80}, {0, 83},
    {349, 80}, {0, 83}, {349, 80}, {0, 250}, {311, 80}, {0, 250}, {261, 80}, {0, 83},
    {311, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 250},
    {261, 80}, {0, 250}, {261, 80}, {0, 83}, {233, 80}, {0, 83}, {233, 80}, {0, 83},
    {233, 80}, {0, 83}, {233, 80}, {0, 250}, {261, 80}, {0, 250}, {233, 80}, {0, 83},
    {311, 727}, {155, 323}, {0, 666}, {174, 80}, {0, 250}, {174, 80}, {0, 250},
    {155, 80}, {0, 250}, {830, 80}, {0, 83}, {415, 80}, {0, 83}, {493, 80}, {0, 83},
    {415, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 83}, {523, 80}, {0, 83},
    {311, 80}, {0, 83}, {523, 80}, {0, 83}, {415, 80}, {0, 83}, {523, 80}, {0, 83},
    {311, 80}, {0, 250}, {415, 80}, {0, 250}, {311, 80}, {0, 83}, {466, 80}, {0, 83},
    {349, 80}, {0, 83}, {466, 80}, {0, 83}, {349, 80}, {0, 83}, {466, 80}, {0, 83},
    {466, 80}, {0, 250}, {349, 80}, {0, 83}, {466, 80}, {0, 83}, {466, 80}, {0, 83},
    {233, 80}, {0, 83}, {220, 80}, {0, 83}, {233, 80}, {0, 83}, {293, 80}, {0, 83},
    {311, 80}, {0, 83}, {466, 80}, {0, 83}, {391, 80}, {0, 83}, {311, 80}, {0, 83},
    {391, 80}, {0, 83}, {391, 80}, {0, 250}, {349, 80}, {0, 83}, {369, 80}, {0, 83},
    {783, 80}, {0, 83}, {391, 80}, {0, 83}, {932, 80}, {0, 83}, {391, 80}, {0, 83},
    {391, 80}, {0, 250}, {311, 80}, {0, 83}, {466, 80}, {0, 83}, {311, 80}, {0, 83},
    {415, 80}, {0, 83}, {311, 80}, {0, 83}, {415, 80}, {0, 83}, {311, 80}, {0, 250},
    {311, 80}, {0, 83}, {466, 80}, {0, 83}, {415, 80}, {0, 83}, {523, 80}, {0, 83},
    {415, 80}, {0, 83}, {103, 80}, {0, 250}, {97, 80}, {0, 250}, {92, 80}, {0, 250},
    {87, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83},
    {174, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83},
    {174, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83},
    {174, 80}, {0, 83}, {174, 80}, {0, 83}, {174, 80}, {0, 83}, {233, 80}, {0, 83},
    {233, 80}, {0, 83}, {233, 80}, {0, 83}, {233, 80}, {0, 83}, {233, 80}, {0, 83},
    {233, 80}, {0, 83}, {233, 80}, {0, 83}, {233, 80}, {0, 83}, {233, 80}, {0, 250},
    {932, 80}, {880, 80}, {932, 80}, {0, 750}, {195, 80}, {0, 83}, {195, 80}, {0, 83},
    {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83},
    {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83},
    {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83},
    {195, 80}, {0, 83}, {195, 80}, {0, 83}, {195, 80}, {0, 83}, {311, 80}, {0, 83},
    {311, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 83}, {311, 80}, {0, 83},
    {311, 80}, {0, 83}, {349, 80}, {0, 250}, {311, 80}, {0, 250}, {277, 80}, {0, 250},
    {261, 80}, {1046, 80}, {1046, 80}, {1046, 80}, {233, 80}, {0, 250}, {415, 80},
    {0, 83}, {415, 80}, {0, 83}, {493, 80}, {0, 83}, {415, 80}, {0, 83}, {311, 80},
    {0, 83}, {415, 80}, {0, 83}, {523, 80}, {0, 83}, {415, 80}, {0, 83}, {523, 80},
    {0, 83}, {415, 80}, {0, 83}, {523, 80}, {0, 83}, {415, 80}, {0, 250}, {415, 80},
    {0, 83}, {523, 80}, {0, 83}, {415, 80}, {0, 83}, {554, 80}, {0, 83}, {554, 80},
    {0, 83}, {554, 80}, {0, 83}, {554, 80}, {0, 83}, {554, 80}, {0, 83}, {554, 80},
    {0, 250}, {415, 80}, {0, 250}, {554, 80}, {0, 83}, {554, 80}, {0, 83}, {554, 80},
    {0, 83}, {261, 80}, {0, 250}, {233, 80}, {0, 250}, {207, 80}, {0, 83}, {523, 80},
    {0, 83}, {415, 80}, {0, 83}, {415, 80}, {0, 83}, {369, 80}, {0, 250}, {369, 80},
    {0, 250}, {369, 80}, {0, 83}, {739, 80}, {0, 83}, {369, 80}, {0, 83}, {369, 80},
    {0, 83}, {349, 80}, {0, 250}, {349, 80}, {0, 250}, {233, 80}, {0, 250}, {233, 80},
    {0, 83}, {233, 80}, {0, 83}, {311, 80}, {0, 83}, {622, 80}, {0, 83}, {311, 80},
    {0, 83}, {311, 80}, {0, 83}, {349, 80}, {0, 83}, {523, 80}, {0, 83}, {466, 80},
    {0, 83}, {349, 80}, {0, 83}, {523, 80}, {0, 83}, {349, 80}, {0, 250}, {349, 80},
    {0, 83}, {349, 80}, {0, 83}, {311, 80}, {523, 80}, {0, 83}, {415, 80}, {0, 83},
    {523, 80}, {0, 83}, {311, 80}, {0, 250}, {311, 80}, {0, 250}, {277, 80}, {0, 83},
    {739, 80}, {0, 83}, {277, 80}, {0, 83}, {739, 80}, {0, 83}, {261, 80}, {0, 250},
    {261, 80}, {0, 250}, {174, 80}, {0, 83}, {466, 80}, {0, 83}, {233, 80}, {0, 250},
    {311, 80}, {0, 83}, {622, 80}, {0, 83}, {233, 80}, {0, 250}, {103, 80}, {0, 83},
    {103, 80}, {0, 83}, {103, 80}, {0, 83}, {103, 80}, {207, 80}, {103, 80}, {0, 666},
    {1174, 80}, {1244, 80}, {0, 250}, {932, 404}, {0, 333}, {1108, 80}, {1174, 80},
    {0, 83}, {1174, 80}, {0, 83}, {987, 80}, {0, 83}, {987, 80}, {0, 167}, {1046, 80},
    {0, 83}, {1046, 80}, {987, 80}, {987, 80}, {0, 83}, {987, 80}, {0, 83}, {1046, 80},
    {0, 83}, {880, 80}, {0, 83}, {880, 80}, {0, 750}, {207, 80}
};

unsigned long previousMillis = 0;
int noteIndex = 0;
bool isPlaying = false;

void setup() {
    pinMode(tonePin, OUTPUT);
}

void midi() {
    unsigned long currentMillis = millis();
    if (noteIndex < sizeof(notes) / sizeof(notes[0])) {
        if (!isPlaying) {
            tone(tonePin, notes[noteIndex].frequency, notes[noteIndex].duration);
            previousMillis = currentMillis;
            isPlaying = true;
        } else {
            if (currentMillis - previousMillis >= notes[noteIndex].duration) {
                noTone(tonePin);
                previousMillis = currentMillis;
                noteIndex++;
                isPlaying = false;
            }
        }
    }
}

void loop() {
    midi();
}